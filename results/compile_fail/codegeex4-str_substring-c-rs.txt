error[E0106]: missing lifetime specifier
  --> /tmp/codegeex4-str_substring-c-rs.rs:27:57
   |
27 | fn str_fromstr(s: &str, in_str: &str, m: i64) -> Option<&str> {
   |                   ----          ----                    ^ expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `s` or `in_str`
help: consider introducing a named lifetime parameter
   |
27 | fn str_fromstr<'a>(s: &'a str, in_str: &'a str, m: i64) -> Option<&'a str> {
   |               ++++     ++               ++                         ++

warning: unused import: `std::ffi::CString`
 --> /tmp/codegeex4-str_substring-c-rs.rs:1:5
  |
1 | use std::ffi::CString;
  |     ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused variable: `s_bytes`
 --> /tmp/codegeex4-str_substring-c-rs.rs:4:9
  |
4 |     let s_bytes = s.as_bytes();
  |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_s_bytes`
  |
  = note: `#[warn(unused_variables)]` on by default

error: aborting due to 1 previous error; 2 warnings emitted

For more information about this error, try `rustc --explain E0106`.
