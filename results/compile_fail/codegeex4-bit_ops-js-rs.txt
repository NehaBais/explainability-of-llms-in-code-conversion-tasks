error[E0601]: `main` function not found in crate `codegeex4_bit_ops_js_rs`
  --> /tmp/codegeex4-bit_ops-js-rs.rs:21:2
   |
21 | }
   |  ^ consider adding a `main` function to `/tmp/codegeex4-bit_ops-js-rs.rs`

error[E0599]: no method named `try_into` found for type `i32` in the current scope
 --> /tmp/codegeex4-bit_ops-js-rs.rs:7:38
  |
7 |     let left_shift = (a << b as u32).try_into().unwrap_or(0); // Rust's shift operators only accept unsigned integers, hence the cast
  |                                      ^^^^^^^^
 --> /private/tmp/rust-20241019-8391-fxpxmx/rustc-1.82.0-src/library/core/src/convert/mod.rs:611:8
  |
  = note: the method is available for `i32` here
  |
  = help: items from traits can only be used if the trait is in scope
  = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021
help: trait `TryInto` which provides `try_into` is implemented but not in scope; perhaps you want to import it
  |
1 + use std::convert::TryInto;
  |
help: there is a method `into` with a similar name
  |
7 |     let left_shift = (a << b as u32).into().unwrap_or(0); // Rust's shift operators only accept unsigned integers, hence the cast
  |                                      ~~~~

error[E0599]: no method named `try_into` found for type `i32` in the current scope
  --> /tmp/codegeex4-bit_ops-js-rs.rs:10:39
   |
10 |     let right_shift = (a >> b as u32).try_into().unwrap_or(0);
   |                                       ^^^^^^^^
  --> /private/tmp/rust-20241019-8391-fxpxmx/rustc-1.82.0-src/library/core/src/convert/mod.rs:611:8
   |
   = note: the method is available for `i32` here
   |
   = help: items from traits can only be used if the trait is in scope
   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021
help: trait `TryInto` which provides `try_into` is implemented but not in scope; perhaps you want to import it
   |
1  + use std::convert::TryInto;
   |
help: there is a method `into` with a similar name
   |
10 |     let right_shift = (a >> b as u32).into().unwrap_or(0);
   |                                       ~~~~

error[E0308]: mismatched types
  --> /tmp/codegeex4-bit_ops-js-rs.rs:13:45
   |
13 |     let arith_right_shift = (a.wrapping_shr(b)).try_into().unwrap_or(0); // Rust's signed integer shifts are different than the JS version
   |                                ------------ ^ expected `u32`, found `i32`
   |                                |
   |                                arguments to this method are incorrect
   |
note: method defined here
  --> /private/tmp/rust-20241019-8391-fxpxmx/rustc-1.82.0-src/library/core/src/num/mod.rs:326:5
   = note: this error originates in the macro `int_impl` (in Nightly builds, run with -Z macro-backtrace for more info)
help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit
   |
13 |     let arith_right_shift = (a.wrapping_shr(b.try_into().unwrap())).try_into().unwrap_or(0); // Rust's signed integer shifts are different than the JS version
   |                                              ++++++++++++++++++++

error[E0599]: no method named `try_into` found for type `i32` in the current scope
  --> /tmp/codegeex4-bit_ops-js-rs.rs:13:49
   |
13 |     let arith_right_shift = (a.wrapping_shr(b)).try_into().unwrap_or(0); // Rust's signed integer shifts are different than the JS version
   |                                                 ^^^^^^^^
  --> /private/tmp/rust-20241019-8391-fxpxmx/rustc-1.82.0-src/library/core/src/convert/mod.rs:611:8
   |
   = note: the method is available for `i32` here
   |
   = help: items from traits can only be used if the trait is in scope
   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021
help: trait `TryInto` which provides `try_into` is implemented but not in scope; perhaps you want to import it
   |
1  + use std::convert::TryInto;
   |
help: there is a method `into` with a similar name
   |
13 |     let arith_right_shift = (a.wrapping_shr(b)).into().unwrap_or(0); // Rust's signed integer shifts are different than the JS version
   |                                                 ~~~~

error[E0599]: no method named `try_into` found for type `i32` in the current scope
  --> /tmp/codegeex4-bit_ops-js-rs.rs:16:54
   |
16 |     let left_rotate = a.rotate_left((b & 31) as u32).try_into().unwrap_or(0);
   |                                                      ^^^^^^^^
  --> /private/tmp/rust-20241019-8391-fxpxmx/rustc-1.82.0-src/library/core/src/convert/mod.rs:611:8
   |
   = note: the method is available for `i32` here
   |
   = help: items from traits can only be used if the trait is in scope
   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021
help: trait `TryInto` which provides `try_into` is implemented but not in scope; perhaps you want to import it
   |
1  + use std::convert::TryInto;
   |
help: there is a method `into` with a similar name
   |
16 |     let left_rotate = a.rotate_left((b & 31) as u32).into().unwrap_or(0);
   |                                                      ~~~~

error[E0599]: no method named `try_into` found for type `i32` in the current scope
  --> /tmp/codegeex4-bit_ops-js-rs.rs:19:56
   |
19 |     let right_rotate = a.rotate_right((b & 31) as u32).try_into().unwrap_or(0);
   |                                                        ^^^^^^^^
  --> /private/tmp/rust-20241019-8391-fxpxmx/rustc-1.82.0-src/library/core/src/convert/mod.rs:611:8
   |
   = note: the method is available for `i32` here
   |
   = help: items from traits can only be used if the trait is in scope
   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021
help: trait `TryInto` which provides `try_into` is implemented but not in scope; perhaps you want to import it
   |
1  + use std::convert::TryInto;
   |
help: there is a method `into` with a similar name
   |
19 |     let right_rotate = a.rotate_right((b & 31) as u32).into().unwrap_or(0);
   |                                                        ~~~~

error: aborting due to 7 previous errors

Some errors have detailed explanations: E0308, E0599, E0601.
For more information about an error, try `rustc --explain E0308`.
