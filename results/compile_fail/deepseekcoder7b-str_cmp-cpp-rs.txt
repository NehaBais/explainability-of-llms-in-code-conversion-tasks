error: unknown start of token: \u{ff5c}
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:50
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                  ^^

error: unknown start of token: \u{2581}
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:56
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                         ^

error: unknown start of token: \u{2581}
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:59
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                            ^

error: unknown start of token: \u{ff5c}
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:68
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                                     ^^

error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `of`
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:57
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                         -^^ expected one of 8 possible tokens
   |                                                         |
   |                                                         help: missing `,`

error: expected one of `!`, `)`, `,`, `.`, `::`, `?`, `{`, or an operator, found `sentence`
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:60
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                            -^^^^^^^^ expected one of 8 possible tokens
   |                                                            |
   |                                                            help: missing `,`

error[E0425]: cannot find value `begin` in this scope
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:51
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                    ^^^^^ not found in this scope

error[E0425]: cannot find value `of` in this scope
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:57
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                          ^^ not found in this scope

error[E0425]: cannot find value `sentence` in this scope
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:60
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                             ^^^^^^^^ not found in this scope

error[E0277]: `T` doesn't implement `std::fmt::Display`
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:2:48
  |
2 |     println!("{} and {} are {}exactly equal.", a, b, if *a == *b {"not "});
  |                                                ^ `T` cannot be formatted with the default formatter
  |
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
  |
1 | fn demo_compare<T: std::cmp::PartialEq + std::fmt::Debug + std::cmp::PartialOrd + std::fmt::Display>(a: &T, b: &T, semantically: &str) {
  |                                                                                 +++++++++++++++++++

error[E0277]: `T` doesn't implement `std::fmt::Display`
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:2:51
  |
2 |     println!("{} and {} are {}exactly equal.", a, b, if *a == *b {"not "});
  |                                                   ^ `T` cannot be formatted with the default formatter
  |
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
  |
1 | fn demo_compare<T: std::cmp::PartialEq + std::fmt::Debug + std::cmp::PartialOrd + std::fmt::Display>(a: &T, b: &T, semantically: &str) {
  |                                                                                 +++++++++++++++++++

error[E0317]: `if` may be missing an `else` clause
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:2:54
  |
2 |     println!("{} and {} are {}exactly equal.", a, b, if *a == *b {"not "});
  |                                                      ^^^^^^^^^^^^^------^
  |                                                      |            |
  |                                                      |            found here
  |                                                      expected `&str`, found `()`
  |
  = note: `if` expressions without `else` evaluate to `()`
  = help: consider adding an `else` block that evaluates to the expected type

error[E0277]: `T` doesn't implement `std::fmt::Display`
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:4:42
  |
4 |     println!("{} and {} are {}inequal.", a, b, if *a != *b {"not "});
  |                                          ^ `T` cannot be formatted with the default formatter
  |
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
  |
1 | fn demo_compare<T: std::cmp::PartialEq + std::fmt::Debug + std::cmp::PartialOrd + std::fmt::Display>(a: &T, b: &T, semantically: &str) {
  |                                                                                 +++++++++++++++++++

error[E0277]: `T` doesn't implement `std::fmt::Display`
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:4:45
  |
4 |     println!("{} and {} are {}inequal.", a, b, if *a != *b {"not "});
  |                                             ^ `T` cannot be formatted with the default formatter
  |
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
  |
1 | fn demo_compare<T: std::cmp::PartialEq + std::fmt::Debug + std::cmp::PartialOrd + std::fmt::Display>(a: &T, b: &T, semantically: &str) {
  |                                                                                 +++++++++++++++++++

error[E0317]: `if` may be missing an `else` clause
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:4:48
  |
4 |     println!("{} and {} are {}inequal.", a, b, if *a != *b {"not "});
  |                                                ^^^^^^^^^^^^^------^
  |                                                |            |
  |                                                |            found here
  |                                                expected `&str`, found `()`
  |
  = note: `if` expressions without `else` evaluate to `()`
  = help: consider adding an `else` block that evaluates to the expected type

error[E0277]: `T` doesn't implement `std::fmt::Display`
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:6:44
  |
6 |     println!("{} is {}ordered before {}.", a, if *a < *b {"not "} else {"un"}, b);
  |                                            ^ `T` cannot be formatted with the default formatter
  |
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
  |
1 | fn demo_compare<T: std::cmp::PartialEq + std::fmt::Debug + std::cmp::PartialOrd + std::fmt::Display>(a: &T, b: &T, semantically: &str) {
  |                                                                                 +++++++++++++++++++

error[E0277]: `T` doesn't implement `std::fmt::Display`
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:6:80
  |
6 |     println!("{} is {}ordered before {}.", a, if *a < *b {"not "} else {"un"}, b);
  |                                                                                ^ `T` cannot be formatted with the default formatter
  |
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
  |
1 | fn demo_compare<T: std::cmp::PartialEq + std::fmt::Debug + std::cmp::PartialOrd + std::fmt::Display>(a: &T, b: &T, semantically: &str) {
  |                                                                                 +++++++++++++++++++

error[E0277]: `T` doesn't implement `std::fmt::Display`
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:8:43
  |
8 |     println!("{} is {}ordered after {}.", a, if *a > *b {"not "} else {"un"}, b);
  |                                           ^ `T` cannot be formatted with the default formatter
  |
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
  |
1 | fn demo_compare<T: std::cmp::PartialEq + std::fmt::Debug + std::cmp::PartialOrd + std::fmt::Display>(a: &T, b: &T, semantically: &str) {
  |                                                                                 +++++++++++++++++++

error[E0277]: `T` doesn't implement `std::fmt::Display`
 --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:8:79
  |
8 |     println!("{} is {}ordered after {}.", a, if *a > *b {"not "} else {"un"}, b);
  |                                                                               ^ `T` cannot be formatted with the default formatter
  |
  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
  |
1 | fn demo_compare<T: std::cmp::PartialEq + std::fmt::Debug + std::cmp::PartialOrd + std::fmt::Display>(a: &T, b: &T, semantically: &str) {
  |                                                                                 +++++++++++++++++++

error[E0609]: no field `to` on type `&'static str`
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:47
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                               ^^ unknown field

error[E0425]: cannot find function `tring` in this scope
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:70
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                                                                        ^^^^^ not found in this scope

error[E0061]: this method takes 1 argument but 3 arguments were supplied
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:26
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |                          ^^^^^^^^^ --------------------- -- ------------------ unexpected argument #3 of type `bool`
   |                                    |                     |
   |                                    |                     unexpected argument #2
   |                                    expected `&String`, found `bool`
   |
help: the return type of this call is `bool` due to the type of the argument passed
  --> /tmp/deepseekcoder7b-str_cmp-cpp-rs.rs:14:14
   |
14 |     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
   |              ^^^^^^^^^^^^^^^^^^^^^^---------------------^^^^^^^^^^^^^^^^^^^^^^^
   |                                    |
   |                                    this argument influences the return type of `unwrap_or`
note: method defined here
  --> /private/tmp/rust-20241019-8391-fxpxmx/rustc-1.82.0-src/library/core/src/option.rs:985:12
help: remove the extra arguments
   |
14 -     let b = &args.get(2).unwrap_or(&"1.3.Bar".to<｜begin▁of▁sentence｜>tring());
14 +     let b = &args.get(2).unwrap_or(/* &String */);
   |

error: aborting due to 22 previous errors

Some errors have detailed explanations: E0061, E0277, E0317, E0425, E0609.
For more information about an error, try `rustc --explain E0061`.
